
name: Deploy infrastructure

description: 'Deploy infrastructure'

inputs:
  environment:
    description: 'The environment to deploy to'
    required: true
    default: 'qa'
  aws-account:
    description: 'The AWS account to deploy to'
    required: true
  aws-region:
    description: 'The AWS region to deploy to'
    required: true
  vars:
    description: 'The variables to pass to the CDK'
    required: true
  pr-number:
    description: 'The PR number'
    required: false

runs:
  using: composite

  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'
    - name: Install and build cdk
      shell: bash
      working-directory: ./cdk
      run: |
        yarn install --frozen-lockfile
        yarn build
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account }}:role/RG-Systems-GH-Actions
        role-session-name: vp-cdk-deploy
        aws-region: ${{ inputs.aws-region }}
    - id: origin-path
      name: Get origin path
      shell: bash
      run: |
        ENV=${{ inputs.environment }}
        ORIGIN_PATH=$(echo $GITHUB_SHA | cut -c 1-6)
        if [ $ENV = "tmp" ]; then
          if [ -n "${{ inputs.pr-number }}" ]; then
            ORIGIN_PATH=${{ inputs.pr-number }}/$ORIGIN_PATH
          fi
        fi
        echo "value=$ORIGIN_PATH" >> $GITHUB_OUTPUT
        echo "RESULT >>>"
        echo $ORIGIN_PATH
    - id: project
      name: Get project name
      shell: bash
      run: |
        PROJECT_NAME=$(cat ./package.json | jq -r '.name')
        echo "value=$PROJECT_NAME" >> $GITHUB_OUTPUT
        echo "RESULT >>>"
        echo $PROJECT_NAME
    - id: stack
      name: Get stack name
      shell: bash
      run: |
        ENV=${{ inputs.environment }}
        STACK=${{ steps.project.outputs.value }}-$ENV
        if [ $ENV = "tmp" ]; then
          if [ -z "${{ inputs.pr-number }}" ]; then
            STACK=${{ steps.project.outputs.value }}-$ENV-${{ steps.origin-path.outputs.value }}
          else
            STACK=${{ steps.project.outputs.value }}-$ENV-${{ inputs.pr-number }}
          fi
        fi
        echo "value=$STACK" >> $GITHUB_OUTPUT
        echo "RESULT >>>"
        echo $STACK
    - id: domain
      name: Get domain name
      shell: bash
      run: |
        ENV=${{ inputs.environment }}
        DOMAIN=$(echo '${{ inputs.vars }}' | jq -r '.DOMAIN')
        if [ $ENV = "tmp" ]; then
          if [ -z "${{ inputs.pr-number }}" ]; then
            DOMAIN=${{ steps.origin-path.outputs.value }}-$DOMAIN
          else
            DOMAIN=${{ inputs.pr-number }}-$DOMAIN
          fi
        fi
        echo "value=$DOMAIN" >> $GITHUB_OUTPUT
        echo "RESULT >>>"
        echo $DOMAIN
    - shell: bash
      name: Create a .env file
      working-directory: ./cdk
      run: |
        touch .env
        echo "DOMAIN=${{ steps.domain.outputs.value }}" >> .env
        echo "ENV=${{ inputs.environment }}" >> .env
        echo "STACK=${{ steps.stack.outputs.value }}" >> .env
        echo "AWS_ACCOUNT=${{ inputs.aws-account }}" >> .env
        echo "AWS_REGION=${{ inputs.aws-region }}" >> .env
        echo "ORIGIN_PATH=${{ steps.origin-path.outputs.value }}" >> .env
        echo "PROJECT_NAME=${{ steps.project.outputs.value }}" >> .env
        echo "RESULT >>>"
        cat .env
    - shell: bash
      name: Destroy distribution
      working-directory: ./cdk
      run: |
        BUCKET=${{ steps.project.outputs.value }}-storage
        STACK=${{ steps.stack.outputs.value }}
        yarn cdk destroy $STACK --force --outputs-file cdk-outputs.json
        aws s3 rm s3://$BUCKET/${{ steps.origin-path.outputs.value }} --recursive
        if [ -n "${{ inputs.pr-number }}" ]; then
          aws s3 rm s3://$BUCKET/${{ inputs.pr-number }} --recursive
        fi
