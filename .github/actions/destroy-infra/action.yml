
name: Deploy infrastructure

description: 'Deploy infrastructure'

inputs:
  environment:
    description: 'The environment to deploy to'
    required: true
    default: 'qa'
  aws-account:
    description: 'The AWS account to deploy to'
    required: true
  aws-region:
    description: 'The AWS region to deploy to'
    required: true

runs:
  using: composite

  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'
    - name: Install and build cdk
      shell: bash
      working-directory: ./cdk
      run: |
        yarn install --frozen-lockfile
        yarn build
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account }}:role/RG-Systems-GH-Actions
        role-session-name: vp-cdk-deploy
        aws-region: ${{ inputs.aws-region }}
    - id: variables
      shell: bash
      name: Get variables
      working-directory: ./cdk
      run: |
        ENV=${{ inputs.environment }}
        ORIGIN_PATH=$(echo $GITHUB_SHA | cut -c 1-6)
        PROJECT_NAME=$(cat ../package.json | jq -r '.name')
        STACK=$PROJECT_NAME-$ENV
        if [ $ENV = "tmp" ]; then
          STACK=$PROJECT_NAME-$ENV-$ORIGIN_PATH
        fi
        touch .env
        echo '${{ inputs.vars }}' | jq -r 'to_entries | .[] | "VARIABLE_\(.key)=\(.value)"' >> .env
        echo "ENV=$ENV" >> .env
        echo "DOMAIN=${{ inputs.vars.DOMAIN }}" >> .env
        echo "AWS_ACCOUNT=${{ inputs.aws-account }}" >> .env
        echo "AWS_REGION=${{ inputs.aws-region }}" >> .env
        echo "ORIGIN_PATH=$ORIGIN_PATH" >> .env
        echo "PROJECT_NAME=$PROJECT_NAME" >> .env
        echo "stack=$STACK" >> $GITHUB_OUTPUT
        echo "bucket=$PROJECT_NAME-storage" >> $GITHUB_OUTPUT
        echo "folder=$ORIGIN_PATH" >> $GITHUB_OUTPUT
    - id: deploy
      shell: bash
      name: Destroy distribution
      working-directory: ./cdk
      run: |
        STACK=${{ steps.variables.outputs.stack }}
        yarn cdk destroy $STACK --require-approval never --outputs-file cdk-outputs.json
        aws s3 rm s3://${{ steps.variables.outputs.bucket }}/${{ steps.variables.outputs.folder }} --recursive
