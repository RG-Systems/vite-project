name: Main

concurrency: main

on:
  push:
    branches:
      - main

jobs:
  infra:
    environment: qa
    runs-on: ubuntu-latest

    outputs:
      folder: ${{ steps.deploy.outputs.folder }}
      bucket: ${{ steps.deploy.outputs.bucket }}
      id: ${{ steps.deploy.outputs.id }}
      url: ${{ steps.deploy.outputs.url }}

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
      - name: Install and build cdk
        working-directory: ./cdk
        run: |
          yarn install --frozen-lockfile
          yarn build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503479554940:role/RG-Systems-GH-Actions
          role-session-name: vp-cdk-deploy
          aws-region: us-east-1
      - id: deploy
        name: Deploy infrastructure
        working-directory: ./cdk
        run: |
          ENV=qa
          ORIGIN_PATH=$(echo $GITHUB_SHA | cut -c 1-6)
          PROJECT_NAME=$(cat ../package.json | jq -r '.name')
          STACK=$PROJECT_NAME-distribution-$ENV
          yarn cdk deploy $STACK --require-approval never --outputs-file cdk-outputs.json
          echo "folder=$ORIGIN_PATH" >> $GITHUB_OUTPUT
          echo "bucket=$(jq -r '."$STACK".BucketName' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "id=$(jq -r '."$STACK".DistributionId' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "url=$(jq -r '."$STACK".DeploymentUrl' cdk-outputs.json)" >> $GITHUB_OUTPUT
      - name: Debug
        run: |
          echo "Debug GITHUB_OUTPUT >>>"
          cat $GITHUB_OUTPUT
          echo "<<< GITHUB_OUTPUT Debug"
          echo "Debug deploy.outputs >>>"
          echo "${{ toJSON(steps.deploy.outputs) }}"
          echo "<<< deploy.outputs Debug"

  build:
    environment: qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
      - name: Install and build app
        run: |
          yarn install --frozen-lockfile
          yarn build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ./dist

  deploy:
    environment:
      name: qa
      url: ${{ needs.infra.outputs.url }}

    runs-on: ubuntu-latest
    needs:
      - infra
      - build

    permissions:
      deployments: write
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./dist
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503479554940:role/RG-Systems-GH-Actions
          role-session-name: vp-cdk-deploy
          aws-region: us-east-1
      - name: Deploy to S3
        run: |
          aws s3 sync ./dist s3://${{ needs.infra.outputs.bucket }}/${{ needs.infra.result.folder }}
          aws cloudfront create-invalidation --distribution-id ${{ needs.infra.result.id }} --paths "/*"
